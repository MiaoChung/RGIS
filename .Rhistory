length(a)
stdDW = vector()
for(i in 1:length(a)){
stdDW[i]= u -SD*a[i]
if( stdDW[i] < min(data) )
break;
}
stdDW
mean(data)-0.5*sd(data)
stdDW = vector()
for(i in 1:length(a)){
stdDW[i]= u -SD*a[i+1]
if( stdDW[i] < min(data) )
break;
}
mean(data)-0.5*sd(data)
stdDW
stdDW
mean(data)-1*sd(data)
mean(data)-1.5*sd(data)
mean(data)-2*sd(data)
if (stdDW[length(stdDW)] < min(data)){
stdDW = sort(stdDW[1:(length(stdDW)-1)])
}else{
stdDW=sort(stdDW)
}
stdDW
std=c(stdDW, u, stdUP)
std
PDen %>% classIntervals(., n=3, style="sd")
interval.SD
interval.SD$var
interval.SD$brks
getSD = function(data, nsd=1 ){
u = mean(data)
SD = sd(data)
stdUP = vector()
a = c(seq(from = 0, to = 3, by=nsd))
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if(stdUP[i] > max(data) )
break;
}
if (stdUP[length(stdUP)]>max(data)){
stdUP = stdUP[1:(length(stdUP)-1)]
}else{
stdUP=stdUP
}
stdDW = vector()
for(i in 1:length(a)){
stdDW[i]= u -SD*a[i+1]
if( stdDW[i] < min(data) )
break;
}
if (stdDW[length(stdDW)] < min(data)){
stdDW = sort(stdDW[1:(length(stdDW)-1)])
}else{
stdDW=sort(stdDW)
}
##get the break stds
std=c(stdDW, u, stdUP)
return(std)
}
PDen %>% getSD
getSD(data)
interval.SD = getSD(data)
getSD(data, nsd=0.5)
q <- cut(PDen, breaks= getSD(data, nsd=1), include.lowest=T)
q
q <- cut(PDen, breaks= getSD(data, nsd=1), include.lowest=T)
q
getSD(data, nsd=1)
getSD(data, nsd=0.5)
getSD(PDen, nsd=0.5)
getSD(PDen, nsd=1)
data=PDen
u = mean(data)
SD = sd(data)
u
SD
stdUP = vector()
a = c(seq(from = 0, to = 3, by=nsd))
a
nsd=1
stdUP = vector()
a = c(seq(from = 0, to = 3, by=nsd))
a
1:length(a)
i=1
stdUP = vector()
stdUP[i]= u +SD*a[i+1]
stdUP
u + SD
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if(stdUP[i] > max(data) )
break;
}
max(data)
i=1
stdUP[i]= u +SD*a[i+1]
stdUP
i=1
stdUP = vector()
stdUP[i]= u +SD*a[i+1]
stdUP
stdUP[i] > max(data)
i=1
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
break;
i=2
stdUP[i]= u +SD*a[i+1]
stdUP
u +SD*a[i+1]
stdUP[i]
if( stdUP[i] > max(data) )
break;
i=3
stdUP[i]= u +SD*a[i+1]
stdUP
if( stdUP[i] > max(data) )
break;
i=4
a
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
break;
length(a)
i=4
stdUP[i]= u +SD*a[i+1]
u +SD*a[i+1]
length(a)
a = c(seq(from = 0, to = 3, by=nsd))
a
a = c(seq(from = 0, to = 10, by=nsd))
a
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
break;
}
stdUP
if (stdUP[length(stdUP)]>max(data)){
stdUP = stdUP[1:(length(stdUP)-1)]
}else{
stdUP=stdUP
}
stdUP
a = c(seq(from = 0, to = 20, by=nsd))
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
break;
}
stdUP
getSD = function(data, nsd=1 ){
u = mean(data)
SD = sd(data)
a = c(seq(from = 0, to = 20, by=nsd))
stdUP = vector()
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
break;
}
if (stdUP[length(stdUP)]>max(data)){
stdUP = stdUP[1:(length(stdUP)-1)]
}else{
stdUP=stdUP
}
stdDW = vector()
for(i in 1:length(a)){
stdDW[i]= u -SD*a[i+1]
if( stdDW[i] < min(data) )
break;
}
if (stdDW[length(stdDW)] < min(data)){
stdDW = sort(stdDW[1:(length(stdDW)-1)])
}else{
stdDW=sort(stdDW)
}
##get the break stds
std=c(stdDW, u, stdUP)
return(std)
}
getSD(PDen, nsd=1)
getSD(PDen, nsd=0.5)
getSD(PDen, nsd=1.5)
bp = getSD(PDen, nsd=1.5)
q <- cut(PDen, breaks= bp, include.lowest=T)
q
bp = getSD(PDen, nsd=1.5)
bp
my_color
q
q %>% levels
q %>% levels %>% length()
bp
length(bp)-1
clr <- as.character(factor(q, labels = brewer.pal(n = length(bp)-1, "YlOrRd")))
clr
plot(TWN, col = clr)
interval.SD$brks %<>% round(digits = 1)
bp
bp %<>% round(digits = 1)
bp
bp
data = PDen
u = mean(data)
SD = sd(data)
nsd = 1.5
u = mean(data)
SD = sd(data)
a = c(seq(from = 0, to = 20, by=nsd))
stdUP = vector()
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
break;
}
a
n=vector()
stdUP = vector()
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
n = i
break;
}
n
a = c(seq(from = 0, to = 20, by=nsd))
n=vector()
stdUP = vector()
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) ){
n = i
break;
}
}
n
stdUP
if (stdUP[length(stdUP)]>max(data)){
stdUP = stdUP[1:(length(stdUP)-1)]
}else{
stdUP=stdUP
}
stdUP
nsd
if (stdUP[length(stdUP)]>max(data)){
stdUP = stdUP[1:(length(stdUP)-1)]
}else{
stdUP=stdUP
}
stdUP
n = length(stdUP)
n
n = 1:length(stdUP)
n
n*SD
n*SD+u
stdDW = vector()
stdDW[i]= u -SD*a[i+1]
break;
for(i in 1:length(a)){
}
if( stdDW[i] < min(data) )
if (stdUP[length(stdUP)]>max(data)){
stdUP = stdUP[1:(length(stdUP)-1)]
}else{
stdUP=stdUP
}
stdUP
n.upper = 1:length(stdUP)
n.upper
stdDW = vector()
for(i in 1:length(a)){
stdDW[i]= u -SD*a[i+1]
if( stdDW[i] < min(data) )
break;
}
if (stdDW[length(stdDW)] < min(data)){
stdDW = sort(stdDW[1:(length(stdDW)-1)])
}else{
stdDW=sort(stdDW)
}
stdDW
n.lower = 1:length(stdDW)
n.lower
std=c(stdDW, u, stdUP)
std
c(n.lower, n.upper)
n.lower*ntd
n.lower*nsd
n.upper*nsd
c(-n.lower*nsd, ,n.upper*nsd)
c(-n.lower*nsd ,n.upper*nsd)
c(-n.lower*nsd,0 ,n.upper*nsd)
paste0(n, "σ")
n = c(-n.lower*nsd,0 ,n.upper*nsd)
paste0(n, "σ")
n = c(paste0(-n.lower*nsd,"σ"), mean ,n.upper*nsd)
c(paste0(-n.lower*nsd,"σ"), mean ,n.upper*nsd)
c(paste0(-n.lower*nsd,"σ"), mean ,n.upper*nsd)
-n.lower*nsd
n = c(-n.lower*nsd, 0,n.upper*nsd)
n
paste0(n, "σ")
brks = paste0(n, "σ")
brks
brks = paste0(c(-n.lower*nsd, 0,n.upper*nsd), "σ")
brks = paste0(c(-n.lower*nsd, 0,n.upper*nsd), "σ")
brks[brks=="0σ"]
brks[brks=="0σ"]=μ
brks[brks=="0σ"]="μ"
brks
list("std"=std, "brks"=brks)
brks
std
bp = getSD(PDen, nsd=1.5)$std
getSD = function(data, nsd=1 ){
u = mean(data)
SD = sd(data)
a = c(seq(from = 0, to = 20, by=nsd))
stdUP = vector()
for(i in 1:length(a)){
stdUP[i]= u +SD*a[i+1]
if( stdUP[i] > max(data) )
break;
}
if (stdUP[length(stdUP)]>max(data)){
stdUP = stdUP[1:(length(stdUP)-1)]
}else{
stdUP=stdUP
}
n.upper = 1:length(stdUP)
stdDW = vector()
for(i in 1:length(a)){
stdDW[i]= u -SD*a[i+1]
if( stdDW[i] < min(data) )
break;
}
if (stdDW[length(stdDW)] < min(data)){
stdDW = sort(stdDW[1:(length(stdDW)-1)])
}else{
stdDW=sort(stdDW)
}
n.lower = 1:length(stdDW)
std=c(stdDW, u, stdUP)
brks = paste0(c(-n.lower*nsd, 0,n.upper*nsd), "σ")
brks[brks=="0σ"]="μ"
return(list("std"=std, "brks"=brks))
}
bp = getSD(PDen, nsd=1.5)$std
bp
getSD(PDen, nsd=1.5)
std = getSD(PDen, nsd=1.5)$std
brks = getSD(PDen, nsd=1.5)$brks
q <- cut(PDen, breaks= std, include.lowest=T)
clr <- as.character(factor(q,
labels = brewer.pal(n = length(bp)-1, "YlOrRd")))
brks
clr <- as.character(factor(q,
labels = brewer.pal(n = length(std)-1, "YlOrRd")))
std %<>% round(digits = 1)
brks[2]
q
std
brks
paste0(brks[1], "-", brks[2])
paste0(brks[1], " - ", brks[2])
paste0(brks[1], " － ", brks[2])
paste0(brks[2], " － ", brks[3])
paste0(brks[3], " － ", brks[4])
paste0(brks[6], " － ", brks[7]),
lenTEXT =
c(paste0(brks[1], " － ", brks[2]),
paste0(brks[2], " － ", brks[3]),
paste0(brks[3], " － ", brks[4]),
paste0(brks[4], " － ", brks[5]),
paste0(brks[5], " － ", brks[6]),
paste0(brks[6], " － ", brks[7]),
paste0(brks[7], " － ", brks[8]))
std = getSD(PDen, nsd=1.5)$std
brks = getSD(PDen, nsd=1.5)$brks
q <- cut(PDen, breaks= std, include.lowest=T)
clr <- as.character(factor(q,
labels = brewer.pal(n = length(std)-1, "YlOrRd")))
plot(TWN, col = clr)
lenTEXT =
c(paste0(brks[1], " － ", brks[2]),
paste0(brks[2], " － ", brks[3]),
paste0(brks[3], " － ", brks[4]),
paste0(brks[4], " － ", brks[5]),
paste0(brks[5], " － ", brks[6]),
paste0(brks[6], " － ", brks[7]),
paste0(brks[7], " － ", brks[8]))
legend(legend = paste0(lenTEXT), fill = my_color, title="Pop Density", "topright")
brewer.pal(n = length(std)-1, "YlOrRd")
?brewer.pal
display/brewer.pal(n = length(std)-1, "YlOrRd")
display.brewer.pal(n = length(std)-1, "YlOrRd")
clr <- as.character(factor(q,
labels = brewer.pal(n = length(std)-1, "YlOrRd")))
plot(TWN, col = clr)
lenTEXT =
c(paste0(brks[1], " - ", brks[2]),
paste0(brks[2], " - ", brks[3]),
paste0(brks[3], " - ", brks[4]),
paste0(brks[4], " - ", brks[5]),
paste0(brks[5], " - ", brks[6]),
paste0(brks[6], " - ", brks[7]),
paste0(brks[7], " - ", brks[8]))
legend(legend = paste0(lenTEXT),
fill = brewer.pal(n = length(std)-1, "YlOrRd"),
title="Pop Density", "topright")
std = getSD(PDen, nsd=1.5)$std
brks = getSD(PDen, nsd=1.5)$brks
q <- cut(PDen, breaks= std, include.lowest=T)
clr <- as.character(factor(q,
labels = brewer.pal(n = length(std)-1, "YlOrRd")))
plot(TWN, col = clr)
lenTEXT =
c(paste0(brks[1], " - ", brks[2]),
paste0(brks[2], " - ", brks[3]),
paste0(brks[3], " - ", brks[4]),
paste0(brks[4], " - ", brks[5]),
paste0(brks[5], " - ", brks[6]),
paste0(brks[6], " - ", brks[7]),
paste0(brks[7], " - ", brks[8]))
legend(legend = paste0(lenTEXT),
fill = brewer.pal(n = length(std)-1, "YlOrRd"),
title="Pop Density", "topright")
?legend
q
interval.NB
interval.NB$var
interval.NB %>% str
plot(interval.SD, pal=c("wheat1", "red3"), main="Standard Deviation", xlab="PDen", ylab="")
plot(interval.QU, pal=my_color, main="Quantile", xlab="PDen", ylab="")
plot(interval.QU, pal=my_color, main="Quantile", xlab="PDen", ylab="")
interval.QU
plot(interval.SD, pal=my_color, main="Standard Deviation", xlab="PDen", ylab="")
interval.SD = PDen %>% classIntervals(., n=3, style="sd")
warnings
warnings()
interval.SD = PDen %>% classIntervals(., n=3, style="sd")
plot(interval.SD, pal=my_color, main="Standard Deviation", xlab="PDen", ylab="")
interval.SD$brks
plot(interval.NB, pal=my_color, main="Natural Breaks", xlab="PDen", ylab="")
plot(interval.SD, pal=my_color, main="Standard Deviation", xlab="PDen", ylab="")
plot(interval.QU, pal=my_color, main="Quantile", xlab="PDen", ylab="")
interval.NB
plot(interval.NB, pal=my_color, main="Natural Breaks", xlab="PDen", ylab="")
plot(interval.NB, pal=my_color, main="Natural Breaks", xlab="PDen", ylab="")
?CRS
spTransform(World, CRS("+proj=robin")) %>% plot
World@proj4string
?spTransform
World@proj4string
World@proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs")
plot(World)
World@proj4string = CRS("+proj=aeqd +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs")
plot(World)
World %>% str
World@bbox
World@proj4string
spTransform(World, CRS("+proj=robin")) %>% plot
World <- readOGR(dsn = "data/World", layer = "country")
World@proj4string
World@proj4string
spTransform(World, CRS("+proj=robin")) %>% plot
spTransform(World, CRS("+proj=robin")) %>% plot
World@proj4string
wrld.eqdc <- spTransform(World, CRS("+proj=eqdc +lat_0=0 +lon_0=0 +lat_1=90 +lat_2=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"))
plot(wrld.eqdc)
World %>% str(max.level=1)
World %>% str(max.level=2)
slot(World, 'polygons')
World@polygons
World@polygons %>% str
World@polygons %>% str(max.level=1)
World@polygons %>% .[[1]]
World@polygons %>% .[[1]]@coords
World@polygons %>% .[[1]]
tmp<- slot(地圖檔案名, 'polygons')
tmp<- slot(World, 'polygons')
slot(World, 'polygons')
World@polygons
World@polygons %>% .[[1]]
World@polygons %>% .[[1]] %>% .@polygons
World@polygons %>% .[[1]] %>% .@Polygons
World@polygons %>% .[[1]] %>% .@Polygons %>% .@coords
World@polygons %>% .[[1]] %>% .@Polygons %>% .[[1]]@oords
World@polygons %>% .[[1]] %>% .@Polygons %>% .[[1]]@coords
World@polygons %>% .[[1]] %>% .@Polygons %>% .[[1]] %>% .@coords
data.sp <- SpatialPointsDataFrame(coords=cbind(x=XCOOR,y=YCOOR), data=TPE, proj4string=proj)
data.sp %>% str
data.sp %>% str(max.level=1)
data.sp %>% str(max.level=2)
?boxplot
bloxplot(PDen)
graphicsbloxplot(PDen)
graphic::sbloxplot(PDen)
graphics::bloxplot(PDen)
?boxplot
boxplot(PDen)
?GISTools
??`GISTools-package`
install.packages(c("knitr", "servr", "devtools"))
install.packages(c("knitr", "servr", "devtools"))
